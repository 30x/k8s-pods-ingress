####
# Deployes the ingress controller as a daemon set, then creates the external ELB to serve it traffic
###
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: k8s-routers
  labels:
    app: k8s-routers
spec:
  template:
    metadata:
      labels:
        app: k8s-routers
      annotations: 
        projectcalico.org/policy: "allow tcp from cidr 192.168.0.0/16; allow tcp from cidr 10.129.0.0/16"
    spec:
      containers:
      - image: registry-1.docker.io/whitlockjc/k8s-pods-ingress:v0
        imagePullPolicy: Always
        name: k8s-public-router
        ports:
          - containerPort: 80
            hostPort: 80
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          # Use the configuration to use the public/private paradigm (public version)
          - name: API_SECRET_LOCATION
            value: routing:public-api-key
          - name: HOSTS_ANNOTATION
            value: publicHosts
          - name: PATHS_ANNOTATION
            value: publicPaths
      - image: registry-1.docker.io/whitlockjc/k8s-pods-ingress:v0
        imagePullPolicy: Always
        name: k8s-private-router
        ports:
          - containerPort: 80
            # If we were using services, we could avoid exposing this port and could use service mechanisms for
            # identifying the port.  For now, we expose the host port and should lock it down to disallow external
            # access.
            hostPort: 81
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          # Use the configuration to use the public/private paradigm (private version)
          - name: API_SECRET_LOCATION
            value: routing:private-api-key
          - name: HOSTS_ANNOTATION
            value: privateHosts
          - name: PATHS_ANNOTATION
            value: privatePaths
          # Since we cannot have two containers listening on the same port, use a different port for the private router
          - name: PORT
            value: "81"
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-public-router-lb
spec:
  type: LoadBalancer
  selector:
    app: k8s-routers
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
